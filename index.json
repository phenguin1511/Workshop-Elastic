[
{
	"uri": "/3-accessibilitytoinstances/3.1-aws-security-group/",
	"title": "Create Security Groups",
	"tags": [],
	"description": "",
	"content": "1. Introduction Security Group (SG) is AWS’s virtual firewall that controls inbound and outbound traffic for EC2 instances.\nSecurity Groups operate at the instance level (different from NACL, which operates at the subnet level).\n2. Create Security Group for Bastion Host Go to AWS Management Console → VPC → Security Groups.\nClick Create security group.\nConfigure:\nSecurity group name: SG_Bastion VPC: select VPC redis-ha-vpc Inbound rules:\nType: SSH (TCP port 22) Source: Administrator’s IP address (e.g., 203.x.x.x/32) Outbound rules:\nBy default, allow all outbound (0.0.0.0/0). 3. Create Security Group for Redis Click Create security group.\nConfigure:\nSecurity group name: SG_Redis VPC: redis-ha-vpc Inbound rules:\nType: Custom TCP Port range: 6379 (Redis TLS) Source: SG_Bastion and/or SG_AppServer Outbound rules:\nKeep default allow-all outbound, or restrict according to security requirements. 4. Result After creation, you will have:\nSG_Bastion: Allows SSH from the admin IP to the Bastion Host. SG_Redis: Only allows Redis port access from Bastion Host or App Server. 💡 Technical Notes Only open necessary ports; avoid using 0.0.0.0/0 for sensitive ports like 22 or 6379. You can use Security Group Reference (e.g., SG_Bastion) instead of IP for easier management when scaling. Default outbound is Allow All, but it can be restricted for enhanced security. Security Groups are stateful: If inbound is allowed, the corresponding outbound response is automatically allowed. "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Amazon ElastiCache For Redis High Availability Overview Amazon ElastiCache is a distributed in-memory cache service provided by Amazon Web Services (AWS). This service helps you easily set up, manage, and scale high-performance caching applications without worrying about managing complex infrastructure.\nKey Benefits 1. High Performance Fast access speed: Data is stored in RAM memory, allowing extremely fast data access Reduce database load: Minimize direct queries to the main database Improve response time: Increase application request processing speed 2. Flexible Scalability Horizontal scaling: Easily add or remove nodes when needed Auto-scaling: Automatically adjust capacity based on load Cluster Mode: Support data partitioning up to 500 shards 3. Reliability and Fault Tolerance Multi-AZ deployment: Deploy across multiple Availability Zones to increase fault tolerance Automatic failover: Automatically switch when the primary node encounters issues Backup and recovery: Automatic backup and data recovery 4. AWS Integration EC2 Integration: Tight integration with Amazon EC2 CloudWatch: Monitor cluster performance and health CloudTrail: Track API calls and configuration changes SNS: Event notifications and alerts ElastiCache for Redis Key Features 1. Automatic Detection and Recovery Automatically detect when nodes encounter issues Automatic recovery with minimal downtime Continuous monitoring of cluster health 2. Cluster Mode Enabled Support data partitioning (data partitioning) up to 500 shards Enable large-scale horizontal scaling Automatically distribute data between shards 3. Multi-AZ Deployment Deploy across multiple Availability Zones Increase fault tolerance (High Availability - HA) Ensure service continuity 4. Automatic Maintenance Automatically backup data on schedule Automatically patch software and security updates Recover data from backup when needed Architecture and Basic Concepts 1. Cluster Collection of nodes running Redis engine Can contain one or multiple shards Managed as a logical unit 2. Node Basic unit of ElastiCache Includes: RAM + CPU + Network Each node runs a Redis instance 3. Shard Group of 1–6 nodes Each shard contains: 1 Primary node: Handle all write and read operations 0–5 Replica nodes: Replicate data from Primary, handle read operations only Support automatic failover 4. Cluster Mode Enabled Allow multiple shards in one cluster Support horizontal scaling Automatically distribute data between shards Use hash slots to distribute data Common Use Cases 1. Caching Layer Cache database query results Cache session data Cache API responses 2. Session Store Store user sessions Share sessions between multiple servers Speed up authentication 3. Real-time Analytics Store real-time analytics data Track user behavior Metrics and monitoring 4. Message Broker Process message queues Pub/Sub messaging Event streaming Comparison with Other Solutions Feature ElastiCache Self-managed Redis Memcached Management Fully managed Manual Manual Scaling Auto-scaling Manual Manual Backup Automatic Manual Not supported Monitoring CloudWatch Third-party Third-party Security IAM, VPC Manual Manual Cost Pay-per-use Infrastructure cost Infrastructure cost Conclusion Amazon ElastiCache provides a powerful, flexible, and easy-to-use caching solution. With high automation capabilities, good integration with the AWS ecosystem, and outstanding performance, ElastiCache is an ideal choice for applications requiring high processing speed and large scalability.\n"
},
{
	"uri": "/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Amazon ElastiCache For Redis High Availability Overview Amazon ElastiCache is a distributed in-memory cache service provided by Amazon Web Services (AWS). This service helps you easily set up, manage, and scale high-performance caching applications without worrying about managing complex infrastructure.\nKey Benefits 1. High Performance Fast access speed: Data is stored in RAM memory, allowing extremely fast data access Reduce database load: Minimize direct queries to the main database Improve response time: Increase application request processing speed 2. Flexible Scalability Horizontal scaling: Easily add or remove nodes when needed Auto-scaling: Automatically adjust capacity based on load Cluster Mode: Support data partitioning up to 500 shards 3. Reliability and Fault Tolerance Multi-AZ deployment: Deploy across multiple Availability Zones to increase fault tolerance Automatic failover: Automatically switch when the primary node encounters issues Backup and recovery: Automatic backup and data recovery 4. AWS Integration EC2 Integration: Tight integration with Amazon EC2 CloudWatch: Monitor cluster performance and health CloudTrail: Track API calls and configuration changes SNS: Event notifications and alerts ElastiCache for Redis Key Features 1. Automatic Detection and Recovery Automatically detect when nodes encounter issues Automatic recovery with minimal downtime Continuous monitoring of cluster health 2. Cluster Mode Enabled Support data partitioning (data partitioning) up to 500 shards Enable large-scale horizontal scaling Automatically distribute data between shards 3. Multi-AZ Deployment Deploy across multiple Availability Zones Increase fault tolerance (High Availability - HA) Ensure service continuity 4. Automatic Maintenance Automatically backup data on schedule Automatically patch software and security updates Recover data from backup when needed Architecture and Basic Concepts 1. Cluster Collection of nodes running Redis engine Can contain one or multiple shards Managed as a logical unit 2. Node Basic unit of ElastiCache Includes: RAM + CPU + Network Each node runs a Redis instance 3. Shard Group of 1–6 nodes Each shard contains: 1 Primary node: Handle all write and read operations 0–5 Replica nodes: Replicate data from Primary, handle read operations only Support automatic failover 4. Cluster Mode Enabled Allow multiple shards in one cluster Support horizontal scaling Automatically distribute data between shards Use hash slots to distribute data Common Use Cases 1. Caching Layer Cache database query results Cache session data Cache API responses 2. Session Store Store user sessions Share sessions between multiple servers Speed up authentication 3. Real-time Analytics Store real-time analytics data Track user behavior Metrics and monitoring 4. Message Broker Process message queues Pub/Sub messaging Event streaming Comparison with Other Solutions Feature ElastiCache Self-managed Redis Memcached Management Fully managed Manual Manual Scaling Auto-scaling Manual Manual Backup Automatic Manual Not supported Monitoring CloudWatch Third-party Third-party Security IAM, VPC Manual Manual Cost Pay-per-use Infrastructure cost Infrastructure cost Conclusion Amazon ElastiCache provides a powerful, flexible, and easy-to-use caching solution. With high automation capabilities, good integration with the AWS ecosystem, and outstanding performance, ElastiCache is an ideal choice for applications requiring high processing speed and large scalability.\n"
},
{
	"uri": "/3-accessibilitytoinstances/3.4-aws-bation-host/",
	"title": "Create Bastion Host",
	"tags": [],
	"description": "",
	"content": "1. Introduction A Bastion Host is an EC2 instance placed in a public subnet that acts as an intermediary (jump host) to SSH/RDP into instances located in a private subnet.\nUsing a Bastion Host helps limit the need to open direct access ports to the private subnet from the Internet.\n2. Steps to Create a Bastion Host Open AWS Management Console → EC2 → Launch Instance.\nBasic Configuration:\nName: redis-bastion OS: Amazon Linux 2 (well-suited for AWS environments) Instance type: t3.micro (sufficient for intermediate SSH tasks) Networking:\nSubnet: Select a Public Subnet (e.g., public-subnet-bastion) Auto-assign Public IP: Enable Enable to assign a Public IP Security Group: Select SG_Bastion (already configured to allow SSH from the admin IP) Key pair:\nCreate a new key pair or select an existing one to SSH into the instance. Click Launch Instance to create.\n3. After Creation The redis-bastion instance will appear in the EC2 Instances list with a running status. Use the selected key pair to SSH into the Bastion Host from the admin machine: ssh -i \u0026lt;your-key.pem\u0026gt; ec2-user@\u0026lt;Public-IP-Bastion\u0026gt; Here, is the IPv4 Public Address just assigned to the EC2 instance.\nAfter running, you will get the following result:\nTo test if the connection works, try:\nping 8.8.8.8 crul http://google.com 4. Install Redis CLI sudo dnf install -y tar gzip make gcc curl -O http://download.redis.io/redis-stable.tar.gz tar xzvf redis-stable.tar.gz cd redis-stable make sudo make install ✅ After completion, check the redis-cli version:\nredis-cli --version 💡 Technical Notes SSH Security: Only allow the admin IP to access port 22 (do not use 0.0.0.0/0 unless in a lab environment).\nSession Management: Consider using AWS Systems Manager Session Manager instead of SSH to reduce the need for opening port 22 to the Internet.\nCost: Use a small instance type for the Bastion Host, and stop it when not in use to save costs.\nLogging: Consider enabling CloudWatch Logs or using Session Manager to record access history.\n"
},
{
	"uri": "/3-accessibilitytoinstances/3.2-aws-subnet-group/",
	"title": "Create ElastiCache Subnet Group",
	"tags": [],
	"description": "",
	"content": "Create ElastiCache Subnet Group 1. Open the Subnet Groups page in ElastiCache Go to AWS Management Console. Navigate to ElastiCache → Subnet Groups. Select Create. 2. Enter Subnet Group information Name: redis-ha-subnet-group Subnets: Select 3 Private Subnets in AZ1, AZ2, AZ3 that were created earlier. Notes:\nOnly select Private Subnets to enhance security for the Redis Cluster. The Subnets must be in the same VPC created in the previous step. "
},
{
	"uri": "/2-prerequiste/2.1-aws-iam/",
	"title": "Create IAM User",
	"tags": [],
	"description": "",
	"content": "Create an IAM User Sign in to the AWS Management Console and open the IAM console at IAM.\nIn the IAM console, select Users from the left navigation menu.\nClick Create user to add a new user.\n3.1 Enter the user name as Elastic-Cache.\nIn the Permissions section, choose Attach existing policies directly.\n4.1 Then click Create Policy.\nIn the Policy Editor, select JSON and paste the following code:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;EC2BastionAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:RunInstances\u0026#34;, \u0026#34;ec2:TerminateInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:RebootInstances\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;VPCAndSubnetAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeVpcs\u0026#34;, \u0026#34;ec2:DescribeSubnets\u0026#34;, \u0026#34;ec2:DescribeRouteTables\u0026#34;, \u0026#34;ec2:DescribeInternetGateways\u0026#34;, \u0026#34;ec2:CreateSubnet\u0026#34;, \u0026#34;ec2:DeleteSubnet\u0026#34;, \u0026#34;ec2:CreateRouteTable\u0026#34;, \u0026#34;ec2:AssociateRouteTable\u0026#34;, \u0026#34;ec2:CreateInternetGateway\u0026#34;, \u0026#34;ec2:AttachInternetGateway\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;ElastiCacheClusterAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;elasticache:CreateCacheCluster\u0026#34;, \u0026#34;elasticache:DeleteCacheCluster\u0026#34;, \u0026#34;elasticache:ModifyCacheCluster\u0026#34;, \u0026#34;elasticache:DescribeCacheClusters\u0026#34;, \u0026#34;elasticache:CreateReplicationGroup\u0026#34;, \u0026#34;elasticache:DeleteReplicationGroup\u0026#34;, \u0026#34;elasticache:ModifyReplicationGroup\u0026#34;, \u0026#34;elasticache:DescribeReplicationGroups\u0026#34;, \u0026#34;elasticache:CreateCacheSubnetGroup\u0026#34;, \u0026#34;elasticache:DeleteCacheSubnetGroup\u0026#34;, \u0026#34;elasticache:DescribeCacheSubnetGroups\u0026#34;, \u0026#34;elasticache:CreateSnapshot\u0026#34;, \u0026#34;elasticache:DeleteSnapshot\u0026#34;, \u0026#34;elasticache:DescribeSnapshots\u0026#34;, \u0026#34;elasticache:ListTagsForResource\u0026#34;, \u0026#34;elasticache:AddTagsToResource\u0026#34;, \u0026#34;elasticache:RemoveTagsFromResource\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CloudWatchAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudwatch:DescribeAlarms\u0026#34;, \u0026#34;cloudwatch:PutMetricAlarm\u0026#34;, \u0026#34;cloudwatch:DeleteAlarms\u0026#34;, \u0026#34;cloudwatch:GetMetricStatistics\u0026#34;, \u0026#34;cloudwatch:ListMetrics\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;S3BackupAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::\u0026lt;your-backup-bucket\u0026gt;\u0026#34;, \u0026#34;arn:aws:s3:::\u0026lt;your-backup-bucket\u0026gt;/*\u0026#34; ] }, { \u0026#34;Sid\u0026#34;: \u0026#34;IAMReadOnly\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:ListUsers\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetUser\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Then click Next to go to the Review section, and click Create user. "
},
{
	"uri": "/2-prerequiste/2.4-aws-internet-gateway/",
	"title": "Create Internet Gateway",
	"tags": [],
	"description": "",
	"content": "1. Introduction An Internet Gateway (IGW) is a component that enables a VPC to connect to the Internet.\nThe IGW is attached to a VPC and used in public subnets through a route table.\n2. Steps to Create an Internet Gateway In the VPC Console, select Internet Gateways from the left-hand menu.\nClick Create internet gateway.\nEnter the following details:\nName tag: redis-ha-igw This name helps easily identify the IGW serving the redis-ha-vpc.\nClick Create internet gateway to proceed.\nAfter creation, select Attach to VPC and attach it to the redis-ha-vpc.\n3. Configure Route Table for Internet Access Open Route Tables in the VPC Console.\nSelect the route table associated with the Public Subnet.\nClick Edit routes → Add route:\nDestination: 0.0.0.0/0 Target: Internet Gateway (redis-ha-igw) Save the changes.\n💡 Technical Notes 0.0.0.0/0 means allowing Internet access from all IP addresses.\n➜ Only apply this to public subnets containing resources that require Internet access (e.g., Bastion Host). Ensure NACL and Security Group rules are configured properly to limit allowed ports and source IPs. An IGW can be attached to only 1 VPC. Each VPC needs only 1 IGW, which can serve multiple public subnets. "
},
{
	"uri": "/3-accessibilitytoinstances/3.3-aws-redis-bation/",
	"title": "Create Redis Cluster on ElastiCache",
	"tags": [],
	"description": "",
	"content": "1. Introduction Amazon ElastiCache for Redis is AWS’s managed Redis service, enabling quick deployment of Redis clusters with automatic backup, scaling, and Multi-AZ support.\nIn this section, we will create a Redis Cluster for the lab.\n2. Open Redis OSS Caches In the AWS Management Console, navigate to Amazon ElastiCache.\nIn the left menu, select Redis OSS caches.\n3. Start Creating a Cache Select Create cache.\n4. Basic Configuration Configuration: Select Redis OSS. Creation method: Choose Design Your Own Cache. Cluster mode: Select Disabled (single shard).\n5. Cluster Information Name: redis-cluster Description: Optional, used to describe the purpose of the cluster. Location:\nSelect AWS Cloud\nMulti-AZ: Choose Enable to ensure high availability.\n6. Cache Settings Configure according to the illustration:\n7. Advanced Settings Configure advanced options according to the guide images:\n8. Completion After finishing the configuration, select Create to create the Redis Cluster. 💡 Technical Notes Cluster Mode Disabled: Simpler for lab environments or small workloads but does not support horizontal scaling. Multi-AZ: Allows Redis to automatically failover when one AZ encounters an issue. Security Group: Ensure port 6379 is open only to allowed sources (e.g., Bastion Host or App Server). Parameter Group: Can be customized if special Redis configurations are required (e.g., persistence, eviction policy). "
},
{
	"uri": "/2-prerequiste/2.3-aws-route-table/",
	"title": "Create Route Tables",
	"tags": [],
	"description": "",
	"content": "Create Route Tables From the left-hand menu, select Route tables. Click Create route table. Enter Name: public-rt. Select the VPC redis-ha-vpc. After creation, click on the newly created Route Table, go to Subnet associations, and select the Public Subnet created earlier. "
},
{
	"uri": "/2-prerequiste/2.2-aws-vpc/",
	"title": "Create VPC and Subnet",
	"tags": [],
	"description": "",
	"content": "1. Create a VPC To create a VPC (Virtual Private Cloud) on AWS, follow these steps:\nGo to the VPC Console at:\nhttps://console.aws.amazon.com/vpc\nIn the left navigation menu, select Your VPCs.\nClick Create VPC.\nConfigure the VPC settings as shown in the illustration:\nName tag: redis-ha-vpc The display name in the management console, recommended to follow the project’s naming convention.\nIPv4 CIDR block: 10.0.0.0/16 The CIDR block defines the IP address range for the entire VPC. /16 provides ~65,536 available IP addresses.\nTenancy: Default Select Dedicated only if you need physically isolated hardware, which incurs higher costs.\nClick Create VPC to create the VPC.\nAfter creation, the new VPC will appear in the Your VPCs list with the status Available.\n2. Create Subnets A subnet is a subdivision of a VPC, with each subnet located in one Availability Zone (AZ).\nFor deploying an HA (High Availability) system, you need to create multiple subnets in different AZs.\nSteps to create subnets In the VPC Console, select Subnets in the left menu.\nClick Create subnet.\nIn the VPC ID field, choose the VPC you just created (redis-ha-vpc).\nCreate the following subnets one by one:\na. Subnet for AZ1\nSubnet name: AZ1 Availability Zone: choose AZ1 of your selected region IPv4 CIDR block: 10.0.1.0/24 Provides 256 IP addresses for part of the workload in AZ1.\nb. Subnet for AZ2\nSubnet name: AZ2 Availability Zone: different from AZ1 and AZ3 IPv4 CIDR block: 10.0.2.0/24 c. Subnet for AZ3\nSubnet name: AZ3 Availability Zone: different from AZ1 and AZ2 IPv4 CIDR block: 10.0.3.0/24 d. Public Subnet (for Bastion Host)\nSubnet name: Public-Subnet Availability Zone: same as AZ1 to optimize cost IPv4 CIDR block: 10.0.10.0/24 The public subnet will be attached to an Internet Gateway to allow external connections.\nClick Create subnet after completing the configuration.\nThe result after successful creation:\n💡 Technical Notes Plan IP addresses in advance: Avoid overlapping CIDR blocks between subnets or with your existing network. Separate public and private subnets: Public subnets connect to the Internet Gateway; private subnets use a NAT Gateway/Bastion to access the internet. High Availability (HA): Spread subnets across at least 2–3 AZs to improve fault tolerance if one AZ fails. Naming convention: Use consistent naming rules for easier management (e.g., \u0026lt;env\u0026gt;-\u0026lt;purpose\u0026gt;-\u0026lt;az\u0026gt;). Use compact CIDR blocks: Allocate only the IPs needed for each subnet to reserve space for future expansion. "
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "\rYou will need to prepare 1 Linux instance in a public subnet and 1 Windows instance in a private subnet to complete this hands-on lab.\nTo learn how to create an EC2 instance and a VPC with public/private subnets, refer to:\nIntroduction to Amazon EC2 Working with Amazon VPC Additionally, to use AWS Systems Manager to manage your Windows instance and other instances, you must grant permissions via an IAM Role.\n🔍 Summary of Required Components IAM Role\nCreate an IAM Role with the AmazonSSMManagedInstanceCore policy. Attach this Role to your EC2 instances so that Systems Manager can manage them. VPC\nCreate a VPC with the CIDR block 10.0.0.0/16. Plan the IP range carefully to avoid conflicts with your existing network. Subnets\nPublic subnet (e.g., 10.0.10.0/24) for the Linux Bastion Host. Private subnet (e.g., 10.0.1.0/24) for the Windows instance. Optionally create them in different Availability Zones for high availability (HA). Internet Gateway (IGW)\nCreate an IGW and attach it to the VPC. Enable Internet access for the public subnet. Route Tables\nPublic Route Table: add a route 0.0.0.0/0 pointing to the IGW. Private Route Table: no route to the IGW; can only connect internally or via a NAT Gateway (if needed). Detailed Sections Prepare VPC and EC2 Instances Create IAM Role "
},
{
	"uri": "/3-accessibilitytoinstances/",
	"title": "Deploy Redis Cluster",
	"tags": [],
	"description": "",
	"content": "Steps to Deploy Redis Cluster on AWS 1. Security Group Create SG_Redis. Open port 6379. Only allow access from SG_Bastion. 2. Subnet Group Create redis-subnet-group. Include private subnets in multiple Availability Zones (Multi-AZ). 3. Redis Cluster Engine: Redis. Cluster Mode: Enabled. Node type: as needed (e.g., cache.t3.micro). Shard: ≥ 1. Replica: ≥ 1. VPC: redis-ha-vpc. Subnet Group: redis-subnet-group. Security Group: SG_Redis. 4. Bastion Host Linux EC2 in a public subnet. SG allows SSH from admin IP. Install redis-cli to connect to Redis via private endpoint. 5. Test Connection From Bastion Host:\nredis-cli -h \u0026lt;redis-endpoint\u0026gt; -p 6379 ping set key1 \u0026#34;Hello Redis\u0026#34; get key1 💡 Security \u0026amp; HA Notes Do not expose Redis to the Internet.\nEnable replication and Multi-AZ for higher fault tolerance.\nManage access using Security Group and configure AUTH if needed.\nMonitor CloudWatch metrics and Redis slow log for performance tracking.\n"
},
{
	"uri": "/4-s3log/",
	"title": "Connect and Test",
	"tags": [],
	"description": "",
	"content": "1. Connect to Redis Step 1: Start Redis Open a terminal on EC2 and run:\nredis-server 2: Connect to Redis from another terminal Open another terminal**, connect to EC2, then access the Redis shell:\nredis-cli 3: Test storing and retrieving data In redis-cli, enter:\nset key1 \u0026#34;hello\u0026#34; get key1 ✅ If the result returns \u0026ldquo;hello\u0026rdquo;, your Redis is running and can store/retrieve data successfully.\nTechnical Note If you run set key1 \u0026ldquo;hello\u0026rdquo; or get key1 directly in the EC2 shell (without entering redis-cli), you will get the error command not found.\nReason: These are Redis commands, not Linux commands.\nCorrect way: Enter redis-cli first before using Redis commands.\n"
},
{
	"uri": "/5-portfwd/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "Clean Up Resources After completing the lab, delete all created resources to avoid unnecessary costs.\n✅ 1. Delete EC2 Instance Go to EC2 → Instances. Select the redis-bastion instance. Click Instance state → Terminate instance. Choose Yes, terminate to confirm. 💡 Note:\nOnce terminated, the instance is permanently deleted and cannot be restored. If you used an Elastic IP for the Bastion Host, remember to release it in EC2 → Elastic IPs to avoid ongoing charges. ✅ 2. Delete ElastiCache Go to ElastiCache → Redis OSS. Select the created Redis cluster → Delete. Delete the Subnet Group if no longer needed: Go to ElastiCache → Subnet Groups → select the group → Delete. 💡 Note:\nDeleting the Redis cluster will remove all data stored in it. If automatic backups are enabled, manually delete snapshots in ElastiCache → Snapshots. ✅ 3. Delete VPC and Related Components Go to VPC → select VPC redis-ha-vpc. Click Actions → Delete VPC. Confirm the deletion. 💡 Note:\nDeleting a VPC will automatically delete its related resources, including: Route Tables Internet Gateway (IGW) Subnets (Public \u0026amp; Private) Security Groups within the VPC If the VPC is associated with a NAT Gateway, delete the NAT Gateway first (since NAT GW incurs hourly charges). 🔍 Pre-Lab Exit Checklist All EC2 instances have been terminated. Elastic IP released (if any). Redis cluster and snapshots deleted. Subnet Groups deleted. NAT Gateway deleted (if any). VPC and related resources deleted. "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]