[
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon ElastiCache For Redis High Availability Tổng quan Amazon ElastiCache là dịch vụ quản lý bộ nhớ đệm phân tán (distributed in-memory cache) được cung cấp bởi Amazon Web Services (AWS). Dịch vụ này giúp bạn dễ dàng thiết lập, quản lý và mở rộng các ứng dụng bộ nhớ đệm hiệu suất cao mà không cần phải lo lắng về việc quản lý cơ sở hạ tầng phức tạp.\nLợi ích chính 1. Hiệu suất cao Tốc độ truy cập nhanh: Dữ liệu được lưu trữ trong bộ nhớ RAM, cho phép truy cập dữ liệu với tốc độ cực nhanh Giảm tải cho cơ sở dữ liệu: Giảm số lượng truy vấn trực tiếp đến cơ sở dữ liệu chính Cải thiện thời gian phản hồi: Tăng tốc độ xử lý yêu cầu của ứng dụng 2. Khả năng mở rộng linh hoạt Horizontal scaling: Dễ dàng thêm hoặc loại bỏ node khi cần thiết Auto-scaling: Tự động điều chỉnh dung lượng dựa trên tải Cluster Mode: Hỗ trợ phân vùng dữ liệu lên đến 500 shard 3. Độ tin cậy và khả năng chịu lỗi Multi-AZ deployment: Triển khai trên nhiều Availability Zone để tăng khả năng chịu lỗi Automatic failover: Tự động chuyển đổi khi node chính gặp sự cố Backup và khôi phục: Tự động backup và khôi phục dữ liệu 4. Tích hợp tốt với AWS EC2 Integration: Tích hợp chặt chẽ với Amazon EC2 CloudWatch: Giám sát hiệu suất và sức khỏe cluster CloudTrail: Theo dõi API calls và thay đổi cấu hình SNS: Thông báo sự kiện và cảnh báo ElastiCache for Redis Tính năng nổi bật 1. Tự động phát hiện và khôi phục Tự động phát hiện khi node gặp sự cố Khôi phục tự động với thời gian downtime tối thiểu Monitoring liên tục sức khỏe của cluster 2. Cluster Mode Enabled Hỗ trợ phân vùng dữ liệu (data partitioning) lên đến 500 shard Cho phép mở rộng ngang (horizontal scaling) quy mô lớn Tự động phân phối dữ liệu giữa các shard 3. Multi-AZ Deployment Triển khai trên nhiều Availability Zone Tăng khả năng chịu lỗi (High Availability - HA) Đảm bảo tính liên tục của dịch vụ 4. Tự động bảo trì Tự động backup dữ liệu theo lịch trình Tự động vá lỗi phần mềm và cập nhật bảo mật Khôi phục dữ liệu từ backup khi cần thiết Kiến trúc và khái niệm cơ bản 1. Cluster (Cụm) Tập hợp các node chạy Redis engine Có thể chứa một hoặc nhiều shard Được quản lý như một đơn vị logic 2. Node (Nút) Đơn vị cơ bản của ElastiCache Bao gồm: RAM + CPU + Network Mỗi node chạy một instance Redis 3. Shard (Phân đoạn) Nhóm từ 1–6 node Mỗi shard chứa: 1 Primary node: Xử lý tất cả các thao tác ghi và đọc 0–5 Replica nodes: Sao chép dữ liệu từ Primary, chỉ xử lý đọc Hỗ trợ failover tự động 4. Cluster Mode Enabled Cho phép nhiều shard trong một cluster Hỗ trợ horizontal scaling Tự động phân phối dữ liệu giữa các shard Sử dụng hash slot để phân phối dữ liệu Use Cases phổ biến 1. Caching Layer Cache kết quả truy vấn cơ sở dữ liệu Cache session data Cache API responses 2. Session Store Lưu trữ session của người dùng Chia sẻ session giữa nhiều server Tăng tốc độ xác thực 3. Real-time Analytics Lưu trữ dữ liệu phân tích thời gian thực Tracking user behavior Metrics và monitoring 4. Message Broker Xử lý message queue Pub/Sub messaging Event streaming So sánh với các giải pháp khác Tính năng ElastiCache Self-managed Redis Memcached Quản lý Fully managed Manual Manual Scaling Auto-scaling Manual Manual Backup Automatic Manual Không hỗ trợ Monitoring CloudWatch Third-party Third-party Security IAM, VPC Manual Manual Cost Pay-per-use Infrastructure cost Infrastructure cost Kết luận Amazon ElastiCache cung cấp một giải pháp bộ nhớ đệm mạnh mẽ, linh hoạt và dễ sử dụng. Với khả năng tự động hóa cao, tích hợp tốt với hệ sinh thái AWS, và hiệu suất vượt trội, ElastiCache là lựa chọn lý tưởng cho các ứng dụng cần tốc độ xử lý cao và khả năng mở rộng lớn.\n"
},
{
	"uri": "/vi/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về Amazon ElastiCache For Redis High Availability Tổng quan Amazon ElastiCache là dịch vụ quản lý bộ nhớ đệm phân tán (distributed in-memory cache) được cung cấp bởi Amazon Web Services (AWS). Dịch vụ này giúp bạn dễ dàng thiết lập, quản lý và mở rộng các ứng dụng bộ nhớ đệm hiệu suất cao mà không cần phải lo lắng về việc quản lý cơ sở hạ tầng phức tạp.\nLợi ích chính 1. Hiệu suất cao Tốc độ truy cập nhanh: Dữ liệu được lưu trữ trong bộ nhớ RAM, cho phép truy cập dữ liệu với tốc độ cực nhanh Giảm tải cho cơ sở dữ liệu: Giảm số lượng truy vấn trực tiếp đến cơ sở dữ liệu chính Cải thiện thời gian phản hồi: Tăng tốc độ xử lý yêu cầu của ứng dụng 2. Khả năng mở rộng linh hoạt Horizontal scaling: Dễ dàng thêm hoặc loại bỏ node khi cần thiết Auto-scaling: Tự động điều chỉnh dung lượng dựa trên tải Cluster Mode: Hỗ trợ phân vùng dữ liệu lên đến 500 shard 3. Độ tin cậy và khả năng chịu lỗi Multi-AZ deployment: Triển khai trên nhiều Availability Zone để tăng khả năng chịu lỗi Automatic failover: Tự động chuyển đổi khi node chính gặp sự cố Backup và khôi phục: Tự động backup và khôi phục dữ liệu 4. Tích hợp tốt với AWS EC2 Integration: Tích hợp chặt chẽ với Amazon EC2 CloudWatch: Giám sát hiệu suất và sức khỏe cluster CloudTrail: Theo dõi API calls và thay đổi cấu hình SNS: Thông báo sự kiện và cảnh báo ElastiCache for Redis Tính năng nổi bật 1. Tự động phát hiện và khôi phục Tự động phát hiện khi node gặp sự cố Khôi phục tự động với thời gian downtime tối thiểu Monitoring liên tục sức khỏe của cluster 2. Cluster Mode Enabled Hỗ trợ phân vùng dữ liệu (data partitioning) lên đến 500 shard Cho phép mở rộng ngang (horizontal scaling) quy mô lớn Tự động phân phối dữ liệu giữa các shard 3. Multi-AZ Deployment Triển khai trên nhiều Availability Zone Tăng khả năng chịu lỗi (High Availability - HA) Đảm bảo tính liên tục của dịch vụ 4. Tự động bảo trì Tự động backup dữ liệu theo lịch trình Tự động vá lỗi phần mềm và cập nhật bảo mật Khôi phục dữ liệu từ backup khi cần thiết Kiến trúc và khái niệm cơ bản 1. Cluster (Cụm) Tập hợp các node chạy Redis engine Có thể chứa một hoặc nhiều shard Được quản lý như một đơn vị logic 2. Node (Nút) Đơn vị cơ bản của ElastiCache Bao gồm: RAM + CPU + Network Mỗi node chạy một instance Redis 3. Shard (Phân đoạn) Nhóm từ 1–6 node Mỗi shard chứa: 1 Primary node: Xử lý tất cả các thao tác ghi và đọc 0–5 Replica nodes: Sao chép dữ liệu từ Primary, chỉ xử lý đọc Hỗ trợ failover tự động 4. Cluster Mode Enabled Cho phép nhiều shard trong một cluster Hỗ trợ horizontal scaling Tự động phân phối dữ liệu giữa các shard Sử dụng hash slot để phân phối dữ liệu Use Cases phổ biến 1. Caching Layer Cache kết quả truy vấn cơ sở dữ liệu Cache session data Cache API responses 2. Session Store Lưu trữ session của người dùng Chia sẻ session giữa nhiều server Tăng tốc độ xác thực 3. Real-time Analytics Lưu trữ dữ liệu phân tích thời gian thực Tracking user behavior Metrics và monitoring 4. Message Broker Xử lý message queue Pub/Sub messaging Event streaming So sánh với các giải pháp khác Tính năng ElastiCache Self-managed Redis Memcached Quản lý Fully managed Manual Manual Scaling Auto-scaling Manual Manual Backup Automatic Manual Không hỗ trợ Monitoring CloudWatch Third-party Third-party Security IAM, VPC Manual Manual Cost Pay-per-use Infrastructure cost Infrastructure cost Kết luận Amazon ElastiCache cung cấp một giải pháp bộ nhớ đệm mạnh mẽ, linh hoạt và dễ sử dụng. Với khả năng tự động hóa cao, tích hợp tốt với hệ sinh thái AWS, và hiệu suất vượt trội, ElastiCache là lựa chọn lý tưởng cho các ứng dụng cần tốc độ xử lý cao và khả năng mở rộng lớn.\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.1-aws-security-group/",
	"title": "Tạo Security Groups",
	"tags": [],
	"description": "",
	"content": "1. Giới thiệu Security Group (SG) là firewall ảo của AWS, kiểm soát inbound và outbound traffic cho EC2 instance.\nSecurity Group hoạt động ở cấp instance level (khác với NACL hoạt động ở cấp subnet).\n2. Tạo Security Group cho Bastion Host Truy cập AWS Management Console → VPC → Security Groups.\nNhấn Create security group.\nCấu hình:\nSecurity group name: SG_Bastion VPC: chọn VPC redis-ha-vpc Inbound rules:\nType: SSH (TCP port 22) Source: Địa chỉ IP quản trị (VD: 203.x.x.x/32) Outbound rules:\nMặc định cho phép tất cả outbound (0.0.0.0/0). 3. Tạo Security Group cho Redis Chọn Create security group.\nCấu hình:\nSecurity group name: SG_Redis VPC: redis-ha-vpc Inbound rules:\nType: Custom TCP Port range: 6379 (Redis TLS) Source: SG_Bastion và/hoặc SG_AppServer Outbound rules:\nGiữ mặc định cho phép toàn bộ outbound hoặc giới hạn theo yêu cầu bảo mật. 4. Kết quả Sau khi tạo xong, bạn sẽ có:\nSG_Bastion: Cho phép SSH từ IP quản trị vào Bastion Host. SG_Redis: Chỉ cho phép truy cập cổng Redis từ Bastion Host hoặc App Server. 💡 Lưu ý kỹ thuật Chỉ mở cổng cần thiết; tránh dùng 0.0.0.0/0 cho các cổng nhạy cảm như 22 hoặc 6379. Có thể dùng Security Group Reference (VD: SG_Bastion) thay vì IP để dễ quản lý khi scaling. Outbound mặc định là Allow All, nhưng có thể giới hạn để tăng bảo mật. Security Group stateful: Nếu inbound cho phép, thì outbound tự động cho phép trả lời. "
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "\rBạn cần tạo sẵn 1 Linux instance thuộc public subnet và 1 Windows instance thuộc private subnet để thực hiện bài thực hành này.\nĐể tìm hiểu cách tạo EC2 instance và VPC với public/private subnet, bạn có thể tham khảo bài lab:\nGiới thiệu về Amazon EC2 Làm việc với Amazon VPC Ngoài ra, để sử dụng AWS Systems Manager quản lý Windows instance và các instance khác, chúng ta cần cấp quyền thông qua IAM Role.\n🔍 Tóm tắt các thành phần cần chuẩn bị IAM Role\nTạo IAM Role với quyền AmazonSSMManagedInstanceCore. Gắn Role này vào các EC2 instance để Systems Manager có thể quản lý. VPC\nTạo VPC với CIDR block 10.0.0.0/16. Quy hoạch IP tránh trùng với mạng nội bộ hiện có. Subnet\nPublic subnet (VD: 10.0.10.0/24) để đặt Linux Bastion Host. Private subnet (VD: 10.0.1.0/24) để đặt Windows instance. Tạo ở các Availability Zone khác nhau nếu cần HA. Internet Gateway (IGW)\nTạo IGW và gắn vào VPC. Cho phép public subnet truy cập Internet. Route Table\nPublic Route Table: có route 0.0.0.0/0 trỏ tới IGW. Private Route Table: không có route ra IGW, chỉ kết nối nội bộ hoặc qua NAT Gateway (nếu cần). Nội dung chi tiết Chuẩn bị VPC và EC2 Instance Tạo IAM Role "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.4-aws-bation-host/",
	"title": "Tạo Bastion Host",
	"tags": [],
	"description": "",
	"content": "1. Giới thiệu Bastion Host là một EC2 instance đặt trong public subnet dùng làm điểm trung gian (jump host) để SSH/RDP vào các instance trong private subnet.\nViệc sử dụng Bastion Host giúp hạn chế việc mở cổng truy cập trực tiếp vào private subnet từ Internet.\n2. Các bước tạo Bastion Host Mở AWS Management Console → EC2 → Launch Instance.\nCấu hình cơ bản:\nName: redis-bastion OS: Amazon Linux 2 (tương thích tốt với môi trường AWS) Instance type: t3.micro (đủ cho nhiệm vụ SSH trung gian) Networking:\nSubnet: Chọn Public Subnet (VD: public-subnet-bastion) Auto-assign Public IP: Bật Enable để có IP Public Security Group: Chọn SG_Bastion (đã cấu hình cho phép SSH từ IP quản trị) Key pair:\nTạo mới hoặc chọn key pair hiện có để SSH vào instance. Nhấn Launch Instance để khởi tạo.\n3. Sau khi tạo Instance redis-bastion sẽ xuất hiện trong danh sách EC2 Instances với trạng thái running. Dùng key pair đã chọn để SSH vào Bastion Host từ máy quản trị: ssh -i \u0026lt;your-key.pem\u0026gt; ec2-user@\u0026lt;Public-IP-Bastion\u0026gt; Với Public-IP-Bastion là Ipv4 vừa tạo từ EC2 Instance\nKhi chạy chúng ta được kết quả sau:\nĐể test xem đã kết nối được chưa hãy thử:\nping 8.8.8.8 crul http://google.com 4. Cài đặt Redis CLI sudo dnf install -y tar gzip make gcc curl -O http://download.redis.io/redis-stable.tar.gz tar xzvf redis-stable.tar.gz cd redis-stable make sudo make install ✅ Sau khi chạy xong, kiểm tra phiên bản redis-cli:\nredis-cli --version 💡 Lưu ý kỹ thuật Bảo mật SSH: Chỉ cho phép IP quản trị truy cập port 22 (không dùng 0.0.0.0/0 trừ khi là môi trường lab).\nQuản lý phiên kết nối: Có thể sử dụng AWS Systems Manager Session Manager để thay thế SSH, giảm nhu cầu mở port 22 ra Internet.\nChi phí: Bastion Host nên dùng instance loại nhỏ, và tắt khi không cần để tiết kiệm.\nLogging: Cân nhắc bật CloudWatch Logs hoặc dùng Session Manager để ghi lại lịch sử truy cập.\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-aws-subnet-group/",
	"title": "Tạo ElastiCache Subnet Group",
	"tags": [],
	"description": "",
	"content": "Tạo ElastiCache Subnet Group 1. Mở trang Subnet Groups trong ElastiCache Truy cập AWS Management Console. Điều hướng đến ElastiCache → Subnet Groups. Chọn Create. 2. Nhập thông tin Subnet Group Name: redis-ha-subnet-group Subnets: Chọn 3 Private Subnets ở AZ1, AZ2, AZ3 đã tạo trước đó. Lưu ý:\nChỉ chọn Private Subnets để tăng cường bảo mật cho Redis Cluster. Các Subnets phải nằm trong cùng một VPC đã tạo ở bước trước. "
},
{
	"uri": "/vi/2-prerequiste/2.4-aws-internet-gateway/",
	"title": "Tạo Internet Gateway",
	"tags": [],
	"description": "",
	"content": "1. Giới thiệu Internet Gateway (IGW) là thành phần cho phép VPC kết nối ra Internet.\nIGW được gắn vào VPC và sử dụng trong các public subnet thông qua route table.\n2. Các bước tạo Internet Gateway Trong VPC Console, chọn Internet Gateways từ menu bên trái.\nNhấn Create internet gateway.\nNhập thông tin:\nName tag: redis-ha-igw Tên này giúp dễ dàng nhận diện IGW phục vụ cho VPC redis-ha-vpc.\nNhấn Create internet gateway để khởi tạo.\nSau khi tạo, chọn Attach to VPC và gắn vào VPC redis-ha-vpc.\n3. Cấu hình Route Table để ra Internet Mở Route Tables trong VPC Console.\nChọn route table gắn với Public Subnet.\nNhấn Edit routes → Add route:\nDestination: 0.0.0.0/0 Target: Internet Gateway (redis-ha-igw) Lưu lại thay đổi.\n💡 Lưu ý kỹ thuật 0.0.0.0/0 nghĩa là cho phép truy cập ra Internet từ mọi địa chỉ IP.\n➜ Chỉ áp dụng cho public subnet chứa tài nguyên cần truy cập Internet (VD: Bastion Host). Đảm bảo rằng NACL và Security Group được cấu hình hợp lý để hạn chế các port và IP truy cập. Một IGW có thể gắn tối đa 1 VPC. Mỗi VPC chỉ cần 1 IGW, có thể phục vụ nhiều subnet công khai. "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.3-aws-redis-bation/",
	"title": "Tạo Redis Cluster trên ElastiCache",
	"tags": [],
	"description": "",
	"content": "1. Giới thiệu Amazon ElastiCache for Redis là dịch vụ Redis managed của AWS, hỗ trợ triển khai nhanh chóng Redis cluster với khả năng tự động backup, scaling và Multi-AZ.\nTrong phần này, chúng ta sẽ tạo Redis Cluster để phục vụ cho bài lab.\n2. Mở Redis OSS Caches Trong AWS Management Console, điều hướng đến Amazon ElastiCache.\nỞ menu bên trái, chọn Redis OSS caches.\n3. Bắt đầu tạo cache Chọn Create cache.\n4. Cấu hình cơ bản Configuration: Chọn Redis OSS. Creation method: Chọn Design Your Own Cache. Cluster mode: Chọn Disabled (single shard).\n5. Thông tin Cluster Name: redis-cluster Description: Tùy chọn, dùng để mô tả mục đích cluster. Location:\nChọn AWS Cloud\nMulti-AZ: Chọn Enable để đảm bảo tính sẵn sàng cao.\n6. Cache Settings Cấu hình theo hình minh họa:\n7. Advanced Settings Cấu hình nâng cao theo ảnh hướng dẫn:\n8. Hoàn tất Sau khi cấu hình xong, chọn Create để tạo Redis Cluster. 💡 Lưu ý kỹ thuật Cluster Mode Disabled: đơn giản hơn cho môi trường lab hoặc workload nhỏ, nhưng không scale theo chiều ngang. Multi-AZ: giúp Redis tự động failover khi một AZ gặp sự cố. Security Group: cần mở port 6379 cho các nguồn được phép (VD: Bastion Host hoặc App Server). Parameter Group: có thể tuỳ chỉnh thêm nếu cần cấu hình đặc biệt cho Redis (VD: persistence, eviction policy). "
},
{
	"uri": "/vi/2-prerequiste/2.3-aws-route-table/",
	"title": "Tạo Route Tables",
	"tags": [],
	"description": "",
	"content": "Tạo Route Tables Chọn Route tables từ menu bên trái. Chọn Create route table. Nhập Name: public-rt. Chọn vào VPC redis-ha-vpc. Sau khi tạo xong nhấn vào Route table vừa chọn, chọn phần Subnet associations và chọn vào Public Subnet đã tạo ở trên "
},
{
	"uri": "/vi/2-prerequiste/2.1-aws-iam/",
	"title": "Tạo User IAM",
	"tags": [],
	"description": "",
	"content": "Tạo người dùng IAM\nĐăng nhập vào Bảng điều khiển quản lý AWS và mở bảng điều khiển IAM tại IAM. Trong bảng điều khiển IAM, chọn Users trên thanh menu bên trái. Chọn Create user để tạo user mới. 3.1 Nhập tên User là Elastic-Cache\nỞ phần Permission chọn Attach existing policies directly 4.1 Sau đó chọn Create Policy\nỞ phần Policy Editor chọn JSON và nhập đoạn code sau:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;EC2BastionAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:RunInstances\u0026#34;, \u0026#34;ec2:TerminateInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:RebootInstances\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:AuthorizeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:RevokeSecurityGroupEgress\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;VPCAndSubnetAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:DescribeVpcs\u0026#34;, \u0026#34;ec2:DescribeSubnets\u0026#34;, \u0026#34;ec2:DescribeRouteTables\u0026#34;, \u0026#34;ec2:DescribeInternetGateways\u0026#34;, \u0026#34;ec2:CreateSubnet\u0026#34;, \u0026#34;ec2:DeleteSubnet\u0026#34;, \u0026#34;ec2:CreateRouteTable\u0026#34;, \u0026#34;ec2:AssociateRouteTable\u0026#34;, \u0026#34;ec2:CreateInternetGateway\u0026#34;, \u0026#34;ec2:AttachInternetGateway\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;ElastiCacheClusterAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;elasticache:CreateCacheCluster\u0026#34;, \u0026#34;elasticache:DeleteCacheCluster\u0026#34;, \u0026#34;elasticache:ModifyCacheCluster\u0026#34;, \u0026#34;elasticache:DescribeCacheClusters\u0026#34;, \u0026#34;elasticache:CreateReplicationGroup\u0026#34;, \u0026#34;elasticache:DeleteReplicationGroup\u0026#34;, \u0026#34;elasticache:ModifyReplicationGroup\u0026#34;, \u0026#34;elasticache:DescribeReplicationGroups\u0026#34;, \u0026#34;elasticache:CreateCacheSubnetGroup\u0026#34;, \u0026#34;elasticache:DeleteCacheSubnetGroup\u0026#34;, \u0026#34;elasticache:DescribeCacheSubnetGroups\u0026#34;, \u0026#34;elasticache:CreateSnapshot\u0026#34;, \u0026#34;elasticache:DeleteSnapshot\u0026#34;, \u0026#34;elasticache:DescribeSnapshots\u0026#34;, \u0026#34;elasticache:ListTagsForResource\u0026#34;, \u0026#34;elasticache:AddTagsToResource\u0026#34;, \u0026#34;elasticache:RemoveTagsFromResource\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;CloudWatchAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudwatch:DescribeAlarms\u0026#34;, \u0026#34;cloudwatch:PutMetricAlarm\u0026#34;, \u0026#34;cloudwatch:DeleteAlarms\u0026#34;, \u0026#34;cloudwatch:GetMetricStatistics\u0026#34;, \u0026#34;cloudwatch:ListMetrics\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;S3BackupAccess\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34;, \u0026#34;s3:ListBucket\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::\u0026lt;your-backup-bucket\u0026gt;\u0026#34;, \u0026#34;arn:aws:s3:::\u0026lt;your-backup-bucket\u0026gt;/*\u0026#34; ] }, { \u0026#34;Sid\u0026#34;: \u0026#34;IAMReadOnly\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:ListRoles\u0026#34;, \u0026#34;iam:ListUsers\u0026#34;, \u0026#34;iam:GetRole\u0026#34;, \u0026#34;iam:GetUser\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Sau đó nhấn Next tới phần Review và nhấn Create user "
},
{
	"uri": "/vi/2-prerequiste/2.2-aws-vpc/",
	"title": "Tạo VPC và Subnet",
	"tags": [],
	"description": "",
	"content": "1. Tạo VPC Để tạo VPC (Virtual Private Cloud) trên AWS, thực hiện theo các bước sau:\nTruy cập VPC Console tại:\nhttps://console.aws.amazon.com/vpc\nỞ menu điều hướng bên trái, chọn Your VPCs.\nNhấn Create VPC.\nCấu hình thông số VPC như hình minh họa:\nName tag: redis-ha-vpc Tên hiển thị trong bảng quản lý, khuyến nghị đặt theo chuẩn đặt tên của dự án.\nIPv4 CIDR block: 10.0.0.0/16 CIDR block xác định dải địa chỉ IP cho toàn bộ VPC. /16 cung cấp ~65,536 địa chỉ IP khả dụng.\nTenancy: Default Chọn Dedicated chỉ khi cần tách biệt phần cứng vật lý, sẽ phát sinh chi phí cao hơn.\nNhấn Create VPC để khởi tạo.\nSau khi tạo, VPC mới sẽ xuất hiện trong danh sách Your VPCs với trạng thái Available.\n2. Tạo Subnet Subnet là các phân vùng con trong VPC, mỗi subnet nằm trong một Availability Zone (AZ). Để triển khai hệ thống HA (High Availability), cần tạo nhiều subnet ở các AZ khác nhau.\nCác bước thực hiện Trong VPC Console, chọn Subnets ở menu bên trái.\nNhấn Create subnet.\nỞ mục VPC ID, chọn VPC vừa tạo (redis-ha-vpc).\nTạo lần lượt các subnet sau:\na. Subnet cho AZ1\nSubnet name: AZ1 Availability Zone: chọn AZ1 của region đang sử dụng IPv4 CIDR block: 10.0.1.0/24 Cung cấp 256 địa chỉ IP, dùng cho một phần workload trong AZ1.\nb. Subnet cho AZ2\nSubnet name: AZ2 Availability Zone: khác với AZ1 và AZ3 IPv4 CIDR block: 10.0.2.0/24 c. Subnet cho AZ3\nSubnet name: AZ3 Availability Zone: khác với AZ1 và AZ2 IPv4 CIDR block: 10.0.3.0/24 d. Public Subnet (dùng cho Bastion Host)\nSubnet name: Public-Subnet Availability Zone: cùng AZ1 để tối ưu chi phí IPv4 CIDR block: 10.0.10.0/24 Public subnet sẽ gắn Internet Gateway để cho phép kết nối từ bên ngoài.\nNhấn Create subnet sau khi cấu hình xong.\nKết quả sau khi tạo thành công:\n💡 Lưu ý kỹ thuật Quy hoạch địa chỉ IP trước: Tránh để các CIDR block của subnet chồng lấn nhau hoặc trùng với hệ thống mạng hiện có. Tách biệt public và private subnet: Public subnet gắn Internet Gateway, private subnet dùng NAT Gateway/Bastion để truy cập ra ngoài. HA (High Availability): Nên trải subnet trên ít nhất 2-3 AZ để tăng khả năng chịu lỗi khi một AZ gặp sự cố. Naming convention: Dùng quy tắc đặt tên thống nhất để dễ dàng quản lý (VD: \u0026lt;env\u0026gt;-\u0026lt;purpose\u0026gt;-\u0026lt;az\u0026gt;). CIDR block nhỏ gọn: Chỉ cấp đủ IP cần thiết cho từng subnet, để dành không gian cho các subnet khác trong tương lai. "
},
{
	"uri": "/vi/3-accessibilitytoinstances/",
	"title": "Triển Khai Redis Cluster",
	"tags": [],
	"description": "",
	"content": "Các bước triển khai Redis Cluster trên AWS 1. Security Group Tạo SG_Redis. Mở cổng 6379. Chỉ cho phép truy cập từ SG_Bastion. 2. Subnet Group Tạo redis-subnet-group. Bao gồm các private subnet ở nhiều Availability Zone (Multi-AZ). 3. Redis Cluster Engine: Redis. Cluster Mode: Enabled. Node type: tùy nhu cầu (VD: cache.t3.micro). Shard: ≥ 1. Replica: ≥ 1. VPC: redis-ha-vpc. Subnet Group: redis-subnet-group. Security Group: SG_Redis. 4. Bastion Host EC2 Linux trong public subnet. SG cho phép SSH từ IP quản trị. Cài đặt redis-cli để kết nối Redis qua private endpoint. 5. Kiểm tra kết nối Từ Bastion Host:\nredis-cli -h \u0026lt;redis-endpoint\u0026gt; -p 6379 ping set key1 \u0026#34;Hello Redis\u0026#34; get key1 💡 Lưu ý bảo mật \u0026amp; HA Không public Redis ra Internet.\nBật replication và Multi-AZ để tăng khả năng chịu lỗi.\nQuản lý truy cập bằng Security Group và cấu hình AUTH nếu cần.\nTheo dõi CloudWatch metrics và Redis slow log để giám sát hiệu suất.\n"
},
{
	"uri": "/vi/4-s3log/",
	"title": "Kết Nối Và Kiểm Thử",
	"tags": [],
	"description": "",
	"content": "1. Kết nối đến Redis Bước 1: Khởi chạy Redis Mở terminal trên EC2 và chạy:\nredis-server 2: Kết nối Redis từ terminal khác Mở một terminal khác, kết nối đến EC2, sau đó truy cập shell Redis:\nredis-cli 3: Kiểm thử lưu và lấy dữ liệu Trong redis-cli, nhập:\nset key1 \u0026#34;hello\u0026#34; get key1 ✅ Nếu kết quả trả về \u0026ldquo;hello\u0026rdquo;, Redis của bạn đã hoạt động và có thể lưu/lấy dữ liệu thành công.\nLưu ý kỹ thuật\nNếu chạy set key1 \u0026ldquo;hello\u0026rdquo; hoặc get key1 trực tiếp trong shell EC2 (không vào redis-cli) sẽ bị báo lỗi command not found.\nNguyên nhân: Đây là lệnh Redis, không phải lệnh Linux.\nCách đúng: Vào redis-cli trước rồi mới nhập các lệnh Redis.\n"
},
{
	"uri": "/vi/5-portfwd/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên Sau khi hoàn tất lab, cần xóa các tài nguyên đã tạo để tránh phát sinh chi phí.\n✅ 1. Xóa EC2 Instance Vào EC2 → Instances. Chọn instance redis-bastion. Nhấn Instance state → Terminate instance. Chọn Yes, terminate để xác nhận. 💡 Lưu ý:\nSau khi terminate, instance sẽ mất vĩnh viễn, không thể khôi phục. Nếu dùng Elastic IP gán cho Bastion Host, nhớ release Elastic IP trong EC2 → Elastic IPs để tránh phí duy trì. ✅ 2. Xóa ElastiCache Vào ElastiCache → Redis OSS. Chọn cluster Redis đã tạo → Delete. Xóa Subnet Group nếu không còn sử dụng: Vào ElastiCache → Subnet Groups → chọn group → Delete. 💡 Lưu ý:\nViệc xóa Redis cluster sẽ xóa toàn bộ dữ liệu trong đó. Nếu đang bật automatic backups, cần xóa snapshot thủ công trong ElastiCache → Snapshots. ✅ 3. Xóa VPC và các thành phần liên quan Vào VPC → chọn VPC redis-ha-vpc. Nhấn Actions → Delete VPC. Xác nhận xóa. 💡 Lưu ý:\nKhi xóa VPC, các tài nguyên liên quan sẽ tự động xóa gồm: Route Tables Internet Gateway (IGW) Subnets (Public \u0026amp; Private) Security Groups trong VPC Nếu VPC đang gắn với NAT Gateway, cần xóa NAT Gateway trước (vì NAT GW tính phí theo giờ). 🔍 Checklist trước khi rời lab Đã terminate toàn bộ EC2 instances. Đã release Elastic IP (nếu có). Đã xóa Redis cluster và snapshot. Đã xóa Subnet Groups. Đã xóa NAT Gateway (nếu có). Đã xóa VPC và các tài nguyên liên quan. "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]